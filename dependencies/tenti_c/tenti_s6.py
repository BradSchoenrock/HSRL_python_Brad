
import numpy
import brill_c

def tenti_s6(lambda_val,temperature_k,pressure_mb,frequencies):
    fcount=frequencies.shape[0]
    fparm=brill_c.doubleArray(fcount)
    sret=brill_c.doubleArray(fcount)
    for n in range(fcount):
        fparm[n]=frequencies[n]
    brill_c.brill_s6(lambda_val,temperature_k,pressure_mb,fparm,fcount,sret)
    spect=numpy.array([sret[x] for x in range(fcount)])
    return spect

def main():
  frequencies=numpy.array([ -3.99000000e+09,  -3.96000000e+09,  -3.93000000e+09,  -3.90000000e+09,
  -3.87000000e+09,  -3.84000000e+09,  -3.81000000e+09,  -3.78000000e+09,
  -3.75000000e+09,  -3.72000000e+09,  -3.69000000e+09,  -3.66000000e+09,
  -3.63000000e+09,  -3.60000000e+09,  -3.57000000e+09,  -3.54000000e+09,
  -3.51000000e+09,  -3.48000000e+09,  -3.45000000e+09,  -3.42000000e+09,
  -3.39000000e+09,  -3.36000000e+09,  -3.33000000e+09,  -3.30000000e+09,
  -3.27000000e+09,  -3.24000000e+09,  -3.21000000e+09,  -3.18000000e+09,
  -3.15000000e+09,  -3.12000000e+09,  -3.09000000e+09,  -3.06000000e+09,
  -3.03000000e+09,  -3.00000000e+09,  -2.97000000e+09,  -2.94000000e+09,
  -2.91000000e+09,  -2.88000000e+09,  -2.85000000e+09,  -2.82000000e+09,
  -2.79000000e+09,  -2.76000000e+09,  -2.73000000e+09,  -2.70000000e+09,
  -2.67000000e+09,  -2.64000000e+09,  -2.61000000e+09,  -2.58000000e+09,
  -2.55000000e+09,  -2.52000000e+09,  -2.49000000e+09,  -2.46000000e+09,
  -2.43000000e+09,  -2.40000000e+09,  -2.37000000e+09,  -2.34000000e+09,
  -2.31000000e+09,  -2.28000000e+09,  -2.25000000e+09,  -2.22000000e+09,
  -2.19000000e+09,  -2.16000000e+09,  -2.13000000e+09,  -2.10000000e+09,
  -2.07000000e+09,  -2.04000000e+09,  -2.01000000e+09,  -1.98000000e+09,
  -1.95000000e+09,  -1.92000000e+09,  -1.89000000e+09,  -1.86000000e+09,
  -1.83000000e+09,  -1.80000000e+09,  -1.77000000e+09,  -1.74000000e+09,
  -1.71000000e+09,  -1.68000000e+09,  -1.65000000e+09,  -1.62000000e+09,
  -1.59000000e+09,  -1.56000000e+09,  -1.53000000e+09,  -1.50000000e+09,
  -1.47000000e+09,  -1.44000000e+09,  -1.41000000e+09,  -1.38000000e+09,
  -1.35000000e+09,  -1.32000000e+09,  -1.29000000e+09,  -1.26000000e+09,
  -1.23000000e+09,  -1.20000000e+09,  -1.17000000e+09,  -1.14000000e+09,
  -1.11000000e+09,  -1.08000000e+09,  -1.05000000e+09,  -1.02000000e+09,
  -9.90000000e+08,  -9.60000000e+08,  -9.30000000e+08,  -9.00000000e+08,
  -8.70000000e+08,  -8.40000000e+08,  -8.10000000e+08,  -7.80000000e+08,
  -7.50000000e+08,  -7.20000000e+08,  -6.90000000e+08,  -6.60000000e+08,
  -6.30000000e+08,  -6.00000000e+08,  -5.70000000e+08,  -5.40000000e+08,
  -5.10000000e+08,  -4.80000000e+08,  -4.50000000e+08,  -4.20000000e+08,
  -3.90000000e+08,  -3.60000000e+08,  -3.30000000e+08,  -3.00000000e+08,
  -2.70000000e+08,  -2.40000000e+08,  -2.10000000e+08,  -1.80000000e+08,
  -1.50000000e+08,  -1.20000000e+08,  -9.00000000e+07,  -6.00000000e+07,
  -3.00000000e+07,   0.00000000e+00,   3.00000000e+07,   6.00000000e+07,
   9.00000000e+07,   1.20000000e+08,   1.50000000e+08,   1.80000000e+08,
   2.10000000e+08,   2.40000000e+08,   2.70000000e+08,   3.00000000e+08,
   3.30000000e+08,   3.60000000e+08,   3.90000000e+08,   4.20000000e+08,
   4.50000000e+08,   4.80000000e+08,   5.10000000e+08,   5.40000000e+08,
   5.70000000e+08,   6.00000000e+08,   6.30000000e+08,   6.60000000e+08,
   6.90000000e+08,   7.20000000e+08,   7.50000000e+08,   7.80000000e+08,
   8.10000000e+08,   8.40000000e+08,   8.70000000e+08,   9.00000000e+08,
   9.30000000e+08,   9.60000000e+08,   9.90000000e+08,   1.02000000e+09,
   1.05000000e+09,   1.08000000e+09,   1.11000000e+09,   1.14000000e+09,
   1.17000000e+09,   1.20000000e+09,   1.23000000e+09,   1.26000000e+09,
   1.29000000e+09,   1.32000000e+09,   1.35000000e+09,   1.38000000e+09,
   1.41000000e+09,   1.44000000e+09,   1.47000000e+09,   1.50000000e+09,
   1.53000000e+09,   1.56000000e+09,   1.59000000e+09,   1.62000000e+09,
   1.65000000e+09,   1.68000000e+09,   1.71000000e+09,   1.74000000e+09,
   1.77000000e+09,   1.80000000e+09,   1.83000000e+09,   1.86000000e+09,
   1.89000000e+09,   1.92000000e+09,   1.95000000e+09,   1.98000000e+09,
   2.01000000e+09,   2.04000000e+09,   2.07000000e+09,   2.10000000e+09,
   2.13000000e+09,   2.16000000e+09,   2.19000000e+09,   2.22000000e+09,
   2.25000000e+09,   2.28000000e+09,   2.31000000e+09,   2.34000000e+09,
   2.37000000e+09,   2.40000000e+09,   2.43000000e+09,   2.46000000e+09,
   2.49000000e+09,   2.52000000e+09,   2.55000000e+09,   2.58000000e+09,
   2.61000000e+09,   2.64000000e+09,   2.67000000e+09,   2.70000000e+09,
   2.73000000e+09,   2.76000000e+09,   2.79000000e+09,   2.82000000e+09,
   2.85000000e+09,   2.88000000e+09,   2.91000000e+09,   2.94000000e+09,
   2.97000000e+09,   3.00000000e+09,   3.03000000e+09,   3.06000000e+09,
   3.09000000e+09,   3.12000000e+09,   3.15000000e+09,   3.18000000e+09,
   3.21000000e+09,   3.24000000e+09,   3.27000000e+09,   3.30000000e+09,
   3.33000000e+09,   3.36000000e+09,   3.39000000e+09,   3.42000000e+09,
   3.45000000e+09,   3.48000000e+09,   3.51000000e+09,   3.54000000e+09,
   3.57000000e+09,   3.60000000e+09,   3.63000000e+09,   3.66000000e+09,
   3.69000000e+09,   3.72000000e+09,   3.75000000e+09,   3.78000000e+09,
   3.81000000e+09,   3.84000000e+09,   3.87000000e+09,   3.90000000e+09,
   3.93000000e+09,   3.96000000e+09,   3.99000000e+09])
  lambda_val=5.3226e-07
  temperature_k=300.200012207 
  pressure_mb=1016.17942583

  v= tenti_s6(lambda_val,temperature_k,pressure_mb,frequencies)

  testval=numpy.array([ 0.00021448  ,0.00022834  ,0.00024316  ,0.00025901  ,0.00027596  ,0.0002941
  ,0.0003135  , 0.00033426  ,0.00035648  ,0.00038026  ,0.00040571  ,0.00043297
  ,0.00046215  ,0.0004934  , 0.00052688  ,0.00056273  ,0.00060114  ,0.0006423
  ,0.00068641  ,0.00073368  ,0.00078434  ,0.00083866  ,0.00089689  ,0.00095933
  ,0.00102629  ,0.0010981  , 0.00117514  ,0.00125778  ,0.00134644  ,0.00144158
  ,0.00154368  ,0.00165325  ,0.00177087  ,0.00189713  ,0.00203268  ,0.00217823
  ,0.00233451  ,0.00250233  ,0.00268256  ,0.00287613  ,0.00308404  ,0.00330735
  ,0.00354723  ,0.00380488  ,0.00408164  ,0.0043789  , 0.00469818  ,0.00504108
  ,0.0054093  , 0.00580466  ,0.00622909  ,0.00668463  ,0.00717344  ,0.00769779
  ,0.00826005  ,0.00886273  ,0.00950843  ,0.01019983  ,0.0109397  , 0.01173089
  ,0.01257628  ,0.01347875  ,0.01444122  ,0.01546651  ,0.01655736  ,0.01771637
  ,0.01894592  ,0.02024813  ,0.02162477  ,0.02307718  ,0.02460621  ,0.02621209
  ,0.02789441  ,0.02965196  ,0.03148271  ,0.0333837  , 0.03535101  ,0.03737977
  ,0.03946405  ,0.04159695  ,0.0437706  , 0.04597631  ,0.04820459  ,0.05044539
  ,0.05268819  ,0.05492222  ,0.0571367  , 0.05932103  ,0.06146501  ,0.06355904
  ,0.06559434  ,0.06756307  ,0.06945846  ,0.07127496  ,0.07300817  ,0.07465499
  ,0.0762135  , 0.07768292  ,0.07906357  ,0.0803567  , 0.08156441  ,0.0826895
  ,0.08373537  ,0.08470584  ,0.08560505  ,0.08643733  ,0.08720712  ,0.08791884
  ,0.08857684  ,0.0891853  , 0.08974821  ,0.0902693  , 0.09075202  ,0.09119952
  ,0.09161465  ,0.09199991  ,0.09235752  ,0.09268938  ,0.0929971  , 0.09328202
  ,0.09354521  ,0.09378755  ,0.09400968  ,0.09421206  ,0.09439504  ,0.09455881
  ,0.09470346  ,0.09482901  ,0.09493543  ,0.09502266  ,0.09509062  ,0.09513922
  ,0.09516841  ,0.09517815  ,0.09516841  ,0.09513922  ,0.09509062  ,0.09502266
  ,0.09493543  ,0.09482901  ,0.09470346  ,0.09455881  ,0.09439504  ,0.09421206
  ,0.09400968  ,0.09378755  ,0.09354521  ,0.09328202  ,0.0929971  , 0.09268938
  ,0.09235752  ,0.09199991  ,0.09161465  ,0.09119952  ,0.09075202  ,0.0902693
  ,0.08974821  ,0.0891853  , 0.08857684  ,0.08791884  ,0.08720712  ,0.08643733
  ,0.08560505  ,0.08470584  ,0.08373537  ,0.0826895  , 0.08156441  ,0.0803567
  ,0.07906357  ,0.07768292  ,0.0762135  , 0.07465499  ,0.07300817  ,0.07127496
  ,0.06945846  ,0.06756307  ,0.06559434  ,0.06355904  ,0.06146501  ,0.05932103
  ,0.0571367  , 0.05492222  ,0.05268819  ,0.05044539  ,0.04820459  ,0.04597631
  ,0.0437706  , 0.04159695  ,0.03946405  ,0.03737977  ,0.03535101  ,0.0333837
  ,0.03148271  ,0.02965196  ,0.02789441  ,0.02621209  ,0.02460621  ,0.02307718
  ,0.02162477  ,0.02024813  ,0.01894592  ,0.01771637  ,0.01655736  ,0.01546651
  ,0.01444122  ,0.01347875  ,0.01257628  ,0.01173089  ,0.0109397  , 0.01019983
  ,0.00950843  ,0.00886273  ,0.00826005  ,0.00769779  ,0.00717344  ,0.00668463
  ,0.00622909  ,0.00580466  ,0.0054093  , 0.00504108  ,0.00469818  ,0.0043789
  ,0.00408164  ,0.00380488  ,0.00354723  ,0.00330735  ,0.00308404  ,0.00287613
  ,0.00268256  ,0.00250233  ,0.00233451  ,0.00217823  ,0.00203268  ,0.00189713
  ,0.00177087  ,0.00165325  ,0.00154368  ,0.00144158  ,0.00134644  ,0.00125778
  ,0.00117514  ,0.0010981  , 0.00102629  ,0.00095933  ,0.00089689  ,0.00083866
  ,0.00078434  ,0.00073368  ,0.00068641  ,0.0006423  , 0.00060114  ,0.00056273
  ,0.00052688  ,0.0004934  , 0.00046215  ,0.00043297  ,0.00040571  ,0.00038026
  ,0.00035648  ,0.00033426  ,0.0003135  , 0.0002941  , 0.00027596  ,0.00025901
  ,0.00024316  ,0.00022834  ,0.00021448])
  print(v)
  if(((v-testval)<1e-7).all()):
        print('all match')
  else:
        print('not all match')
  print('avg diff',numpy.sum(v-testval)/v.size)

if __name__=='__main__':
  main()